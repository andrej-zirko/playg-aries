{
	"info": {
		"_postman_id": "f0a0967f-e7ac-42b6-a6c5-33a91937a2af",
		"name": "aries-flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup-helpers",
			"item": [
				{
					"name": "[Registrator] /register - Authenticate Agent1 DID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"did\":\"JdRkpwWwCBqjfcrsjAH1GT\",\n   \"verkey\":\"AcFvnqBQUatQmU4kfc9R9XEci8HQfDRPutGFTwpdWUrZ\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "schema",
			"item": [
				{
					"name": "[Issuer] /schemas - Create schema",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"attributes\":[\n      \"passportNumber\",\n      \"expirationDate\"\n   ],\n   \"schema_version\":\"1.0\",\n   \"schema_name\":\"passport\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/schemas",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"schemas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cred_def",
			"item": [
				{
					"name": "[Issuer] /credential-definitions - Send a credDef to the ledger",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();",
									"var time_milliseconds = date.getTime();",
									"pm.environment.set(\"credDefTag\", \"PassportCredDef05121999-\" + time_milliseconds);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"pm.environment.set(\"credDefId\", response.credential_definition_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tag\": \"{{credDefTag}}\",\n  \"schema_id\": \"JdRkpwWwCBqjfcrsjAH1GT:2:passport:1.0\",\n  \"support_revocation\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/credential-definitions",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"credential-definitions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NO-LONGER-NEEDED-0011-cred-revocation",
			"item": [
				{
					"name": "[Issuer] /revocation/create-registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"agent1.revoc_reg_id\", response.result.revoc_reg_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"max_cred_num\": 100,\n  \"credential_definition_id\": \"JdRkpwWwCBqjfcrsjAH1GT:3:CL:8:PassportCredDef05121999_a\",\n  \"issuance_by_default\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/revocation/create-registry",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"revocation",
								"create-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /revocation/registry/{rev_reg_id}",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tails_public_uri\": \"http://aries-cloudagent-runner.faber/revocation/registry/{{agent1.revoc_reg_id}}/tails-file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/revocation/registry/{{agent1.revoc_reg_id}}",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"revocation",
								"registry",
								"{{agent1.revoc_reg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /revocation/registry/{rev_reg_id}/publish",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/revocation/registry/{{agent1.revoc_reg_id}}/publish",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"revocation",
								"registry",
								"{{agent1.revoc_reg_id}}",
								"publish"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0160-connection-protocol",
			"item": [
				{
					"name": "[Issuer] /connections/create-invitation - Create a new connection invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"invitation\", JSON.stringify(response.invitation));",
									"pm.environment.set(\"agent1.connection_id\", response.connection_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/connections/create-invitation",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"connections",
								"create-invitation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /connections/receive-invitation - /connections/receive-invitation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"agent2.connection_id\", response.connection_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{invitation}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prover.baseUrl}}/connections/receive-invitation",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"connections",
								"receive-invitation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /connections/{id}/accept-invitation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prover.baseUrl}}/connections/{{agent2.connection_id}}/accept-invitation?my_endpoint=http://aries-cloudagent-runner.alice:8002",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"connections",
								"{{agent2.connection_id}}",
								"accept-invitation"
							],
							"query": [
								{
									"key": "my_endpoint",
									"value": "http://aries-cloudagent-runner.alice:8002"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /connections/{id}/accept-request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/connections/{{agent1.connection_id}}/accept-request",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"connections",
								"{{agent1.connection_id}}",
								"accept-request"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0023-did-exchange",
			"item": [
				{
					"name": "[Issuer] /out-of-band/create-invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"invitation\", JSON.stringify(response.invitation));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"handshake_protocols\": [\n    \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0\"\n  ],\n  \"use_public_did\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/out-of-band/create-invitation",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"out-of-band",
								"create-invitation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /out-of-band/receive-invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"agent2.connection_id\", response.connection_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{invitation}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prover.baseUrl}}/out-of-band/receive-invitation",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"out-of-band",
								"receive-invitation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /didexchange/{conn_id}/accept-invitation",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{prover.baseUrl}}/didexchange/{{agent2.connection_id}}/accept-invitation",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"didexchange",
								"{{agent2.connection_id}}",
								"accept-invitation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /connections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"agent1.connection_id\", response.results[0].connection_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/connections",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /didexchange/{conn_id}/accept-request",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/didexchange/{{agent1.connection_id}}/accept-request",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"didexchange",
								"{{agent1.connection_id}}",
								"accept-request"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0036-issue-credential",
			"item": [
				{
					"name": "[Issuer] /issue-credential/send-offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"comment\": \"Sample comment here!\",\n  \"trace\": false,\n  \"credential_preview\": {\n    \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/credential-preview\",\n    \"attributes\": [\n      {\n        \"name\": \"passportNumber\",\n        \"value\": \"123454321\"\n      },\n      {\n        \"name\": \"expirationDate\",\n        \"value\": \"2020-01-01\"\n      }\n    ]\n  },\n  \"auto_issue\": false,\n  \"cred_def_id\": \"{{credDefId}}\",\n  \"connection_id\": \"{{agent1.connection_id}}\",\n  \"auto_remove\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/issue-credential/send-offer",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"send-offer"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /issue-credential/records - get cred_ex_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const agent2ConnectionId = pm.environment.get(\"agent1.connection_id\");",
									"",
									"const record = response.results.sort((a, b) => b.created_at.localeCompare(a.created_at)).find(result => result.connection_id === agent2ConnectionId);",
									"pm.environment.set(\"agent1.credential_exchange_id\", record.credential_exchange_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/issue-credential/records",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /issue-credential/records - get cred_ex_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const agent2ConnectionId = pm.environment.get(\"agent2.connection_id\");",
									"",
									"const record = response.results.sort((a, b) => b.created_at.localeCompare(a.created_at)).find(result => result.connection_id === agent2ConnectionId);",
									"pm.environment.set(\"agent2.credential_exchange_id\", record.credential_exchange_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prover.baseUrl}}/issue-credential/records",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /issue-credential/records/{cred_ex_id}/send-request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prover.baseUrl}}/issue-credential/records/{{agent2.credential_exchange_id}}/send-request",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"records",
								"{{agent2.credential_exchange_id}}",
								"send-request"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /issue-credential/records/{cred_ex_id}/issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// \"credential_exchange_id\": \"9503e3ea-3b82-4b0a-80df-bb7bb841e4ad\","
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"comment\": \"Some comment\",\n  \"credential_preview\": {\n    \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/credential-preview\",\n    \"attributes\": [\n      {\n        \"name\": \"passportNumber\",\n        \"value\": \"123454321\"\n      },\n      {\n        \"name\": \"expirationDate\",\n        \"value\": \"2020-01-01\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/issue-credential/records/{{agent1.credential_exchange_id}}/issue",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"records",
								"{{agent1.credential_exchange_id}}",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /issue-credential/records/{cred_ex_id}/store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prover.baseUrl}}/issue-credential/records/{{agent2.credential_exchange_id}}/store",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"records",
								"{{agent2.credential_exchange_id}}",
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /issue-credential/revoke",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/issue-credential/revoke?rev_reg_id={{agent1.revoc_reg_id}}&publish=true&cred_rev_id=1",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"issue-credential",
								"revoke"
							],
							"query": [
								{
									"key": "rev_reg_id",
									"value": "{{agent1.revoc_reg_id}}"
								},
								{
									"key": "publish",
									"value": "true"
								},
								{
									"key": "cred_rev_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "0037-present-proof",
			"item": [
				{
					"name": "[Issuer] /present-proof/send-request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"pm.environment.set(\"agent1.presentation_exchange_id\", response.presentation_exchange_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"    // \"non_revoked\": {",
									"    //   \"from\": 1594477318,",
									"    //   \"to\": 1594477656",
									"    // }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"connection_id\": \"{{agent1.connection_id}}\",\n  \"comment\": \"This is a comment about the reason for the proof\",\n  \"proof_request\": {\n    \"name\": \"Proof of Passport\",\n    \"version\": \"1.0\",\n    \"requested_attributes\": {\n      \"0_name_uuid\": {\n        \"name\": \"passportNumber\",\n        \"restrictions\": [\n          {\n            \"cred_def_id\": \"{{credDefId}}\"\n          }\n        ]\n      },\n      \"0_date_uuid\": {\n        \"name\": \"expirationDate\",\n        \"restrictions\": [\n          {\n            \"cred_def_id\": \"{{credDefId}}\"\n          }\n        ]\n      }\n    },\n    \"requested_predicates\": {}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{issuer.baseUrl}}/present-proof/send-request",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"present-proof",
								"send-request"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /present-proof/records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const agent2ConnectionId = pm.environment.get(\"agent2.connection_id\");",
									"",
									"const record = response.results.sort((a, b) => b.created_at.localeCompare(a.created_at)).find(result => result.connection_id === agent2ConnectionId);",
									"console.log(record.presentation_exchange_id)",
									"pm.environment.set(\"agent2.presentation_exchange_id\", record.presentation_exchange_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prover.baseUrl}}/present-proof/records",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"present-proof",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"// const agent2ConnectionId = pm.environment.get(\"agent2.connection_id\");",
									"const credDefId = pm.environment.get(\"credDefId\");",
									"",
									"const record = response.results.find(result => result.cred_def_id === credDefId);",
									"pm.environment.set(\"agent2.cred_id\", record.referent);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prover.baseUrl}}/credentials",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prover] /present-proof/records/{pres_ex_id}/send-presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requested_attributes\": {\n    \"0_name_uuid\": {\n      \"cred_id\": \"{{agent2.cred_id}}\",\n      \"revealed\": true\n    },\n    \"0_date_uuid\": {\n      \"cred_id\": \"{{agent2.cred_id}}\",\n      \"revealed\": true\n    }\n  },\n  \"requested_predicates\": {},\n  \"self_attested_attributes\": {},\n  \"trace\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prover.baseUrl}}/present-proof/records/{{agent2.presentation_exchange_id}}/send-presentation",
							"host": [
								"{{prover.baseUrl}}"
							],
							"path": [
								"present-proof",
								"records",
								"{{agent2.presentation_exchange_id}}",
								"send-presentation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /present-proof/records/{pres_ex_id}/verify-presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"verified:\"+ response.verified)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/present-proof/records/{{agent1.presentation_exchange_id}}/verify-presentation",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"present-proof",
								"records",
								"{{agent1.presentation_exchange_id}}",
								"verify-presentation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Issuer] /present-proof/records/{pres_ex_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"verified:\"+ response.verified)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{issuer.baseUrl}}/present-proof/records/{{agent1.presentation_exchange_id}}",
							"host": [
								"{{issuer.baseUrl}}"
							],
							"path": [
								"present-proof",
								"records",
								"{{agent1.presentation_exchange_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DID",
			"item": [
				{
					"name": "[Agent1] /wallet​/did - List wallet DIDs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/wallet/did?did=JdRkpwWwCBqjfcrsjAH1GT",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"wallet",
								"did"
							],
							"query": [
								{
									"key": "did",
									"value": "JdRkpwWwCBqjfcrsjAH1GT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Agent2] /wallet​/did - List wallet DIDs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/wallet/did",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"wallet",
								"did"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "issuer.baseUrl",
			"value": "http://localhost:8081"
		},
		{
			"key": "prover.baseUrl",
			"value": "http://localhost:8082"
		}
	]
}